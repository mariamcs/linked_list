#class Quese based on linked list

template <class T>
class Queue
{
  public:
    Node<T>* front;
    Node<T>* rear;
    Queue();
    void enqueue(T element);
    T dequeue();
    bool IsEmpty();
    int size();
}

template <class T>
bool Queue<T>::IsEmpty()
{
  if(front == NULL && rear == NULL) return true;
  return false;
}

template <class T>
Queue<T>::Queue()
{
  front = NULL;
  rear = NULL;
}

template <class T>
int Queue<T>::Size()
{
  int count = 0;
  if(IsEmpty())return count;
  Node<T>* temp = front;
  while(temp->next != NULL)
  {
    count++;
    temp = temp->next;
  }
  return count;
}

template <class T>
void Queue<T>::enqueue(T element)
{
  Node<T>* new_node;
  new_node->value = element;
  new_node->next = NULL;
  if(IsEmpty()) 
  {
    front = new_node;
    rear = new_node;
  }
  else
  {
    rear->next = new_node;
    rear = new_node;
    
  }
}

template <class T>
T Queue<T>::deqeue()
{
  if(IsEmpty()) return 0;
  Node<T>* temp = front;
  int value = front->value;
  front = front->next;
  delete temp;
  return value;
  
}
